/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.22.2
 * source: command.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from './mail_base';
import * as pb_1 from 'google-protobuf';
import * as grpc_1 from '@grpc/grpc-js';
export namespace command {
  export enum LoginType {
    password = 0,
    auth = 1,
  }
  export enum CalendarEventType {
    all = 0,
    mail = 1,
    user = 2,
  }
  export class UpdateAccountRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            account?: dependency_1.mail_base.Account;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('account' in data && data.account != undefined) {
          this.account = data.account;
        }
      }
    }
    get account() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.mail_base.Account,
        1,
      ) as dependency_1.mail_base.Account;
    }
    set account(value: dependency_1.mail_base.Account) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_account() {
      return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
      account?: ReturnType<
        typeof dependency_1.mail_base.Account.prototype.toObject
      >;
    }): UpdateAccountRequest {
      const message = new UpdateAccountRequest({});
      if (data.account != null) {
        message.account = dependency_1.mail_base.Account.fromObject(
          data.account,
        );
      }
      return message;
    }
    toObject() {
      const data: {
        account?: ReturnType<
          typeof dependency_1.mail_base.Account.prototype.toObject
        >;
      } = {};
      if (this.account != null) {
        data.account = this.account.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.has_account)
        writer.writeMessage(1, this.account, () =>
          this.account.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): UpdateAccountRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new UpdateAccountRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.account,
              () =>
                (message.account =
                  dependency_1.mail_base.Account.deserialize(reader)),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateAccountRequest {
      return UpdateAccountRequest.deserialize(bytes);
    }
  }
  export class UpdateAccountResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
      }
    }
    static fromObject(data: {}): UpdateAccountResponse {
      const message = new UpdateAccountResponse({});
      return message;
    }
    toObject() {
      const data: {} = {};
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): UpdateAccountResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new UpdateAccountResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateAccountResponse {
      return UpdateAccountResponse.deserialize(bytes);
    }
  }
  export class GetAccountRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            need_refresh?: boolean;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('need_refresh' in data && data.need_refresh != undefined) {
          this.need_refresh = data.need_refresh;
        }
      }
    }
    get need_refresh() {
      return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set need_refresh(value: boolean) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {need_refresh?: boolean}): GetAccountRequest {
      const message = new GetAccountRequest({});
      if (data.need_refresh != null) {
        message.need_refresh = data.need_refresh;
      }
      return message;
    }
    toObject() {
      const data: {
        need_refresh?: boolean;
      } = {};
      if (this.need_refresh != null) {
        data.need_refresh = this.need_refresh;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.need_refresh != false) writer.writeBool(1, this.need_refresh);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): GetAccountRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new GetAccountRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.need_refresh = reader.readBool();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetAccountRequest {
      return GetAccountRequest.deserialize(bytes);
    }
  }
  export class GetAccountResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            account?: dependency_1.mail_base.Account;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('account' in data && data.account != undefined) {
          this.account = data.account;
        }
      }
    }
    get account() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.mail_base.Account,
        1,
      ) as dependency_1.mail_base.Account;
    }
    set account(value: dependency_1.mail_base.Account) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_account() {
      return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
      account?: ReturnType<
        typeof dependency_1.mail_base.Account.prototype.toObject
      >;
    }): GetAccountResponse {
      const message = new GetAccountResponse({});
      if (data.account != null) {
        message.account = dependency_1.mail_base.Account.fromObject(
          data.account,
        );
      }
      return message;
    }
    toObject() {
      const data: {
        account?: ReturnType<
          typeof dependency_1.mail_base.Account.prototype.toObject
        >;
      } = {};
      if (this.account != null) {
        data.account = this.account.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.has_account)
        writer.writeMessage(1, this.account, () =>
          this.account.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): GetAccountResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new GetAccountResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.account,
              () =>
                (message.account =
                  dependency_1.mail_base.Account.deserialize(reader)),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetAccountResponse {
      return GetAccountResponse.deserialize(bytes);
    }
  }
  export class SendMailRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            subject?: string;
            from?: dependency_1.mail_base.MailAddress;
            to?: dependency_1.mail_base.MailAddress[];
            cc?: dependency_1.mail_base.MailAddress[];
            bcc?: dependency_1.mail_base.MailAddress[];
            body?: string;
            deliver_time?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [3, 4, 5],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('subject' in data && data.subject != undefined) {
          this.subject = data.subject;
        }
        if ('from' in data && data.from != undefined) {
          this.from = data.from;
        }
        if ('to' in data && data.to != undefined) {
          this.to = data.to;
        }
        if ('cc' in data && data.cc != undefined) {
          this.cc = data.cc;
        }
        if ('bcc' in data && data.bcc != undefined) {
          this.bcc = data.bcc;
        }
        if ('body' in data && data.body != undefined) {
          this.body = data.body;
        }
        if ('deliver_time' in data && data.deliver_time != undefined) {
          this.deliver_time = data.deliver_time;
        }
      }
    }
    get subject() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set subject(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get from() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.mail_base.MailAddress,
        2,
      ) as dependency_1.mail_base.MailAddress;
    }
    set from(value: dependency_1.mail_base.MailAddress) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_from() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get to() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        dependency_1.mail_base.MailAddress,
        3,
      ) as dependency_1.mail_base.MailAddress[];
    }
    set to(value: dependency_1.mail_base.MailAddress[]) {
      pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get cc() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        dependency_1.mail_base.MailAddress,
        4,
      ) as dependency_1.mail_base.MailAddress[];
    }
    set cc(value: dependency_1.mail_base.MailAddress[]) {
      pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    get bcc() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        dependency_1.mail_base.MailAddress,
        5,
      ) as dependency_1.mail_base.MailAddress[];
    }
    set bcc(value: dependency_1.mail_base.MailAddress[]) {
      pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    get body() {
      return pb_1.Message.getFieldWithDefault(this, 6, '') as string;
    }
    set body(value: string) {
      pb_1.Message.setField(this, 6, value);
    }
    get deliver_time() {
      return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set deliver_time(value: number) {
      pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
      subject?: string;
      from?: ReturnType<
        typeof dependency_1.mail_base.MailAddress.prototype.toObject
      >;
      to?: ReturnType<
        typeof dependency_1.mail_base.MailAddress.prototype.toObject
      >[];
      cc?: ReturnType<
        typeof dependency_1.mail_base.MailAddress.prototype.toObject
      >[];
      bcc?: ReturnType<
        typeof dependency_1.mail_base.MailAddress.prototype.toObject
      >[];
      body?: string;
      deliver_time?: number;
    }): SendMailRequest {
      const message = new SendMailRequest({});
      if (data.subject != null) {
        message.subject = data.subject;
      }
      if (data.from != null) {
        message.from = dependency_1.mail_base.MailAddress.fromObject(data.from);
      }
      if (data.to != null) {
        message.to = data.to.map(item =>
          dependency_1.mail_base.MailAddress.fromObject(item),
        );
      }
      if (data.cc != null) {
        message.cc = data.cc.map(item =>
          dependency_1.mail_base.MailAddress.fromObject(item),
        );
      }
      if (data.bcc != null) {
        message.bcc = data.bcc.map(item =>
          dependency_1.mail_base.MailAddress.fromObject(item),
        );
      }
      if (data.body != null) {
        message.body = data.body;
      }
      if (data.deliver_time != null) {
        message.deliver_time = data.deliver_time;
      }
      return message;
    }
    toObject() {
      const data: {
        subject?: string;
        from?: ReturnType<
          typeof dependency_1.mail_base.MailAddress.prototype.toObject
        >;
        to?: ReturnType<
          typeof dependency_1.mail_base.MailAddress.prototype.toObject
        >[];
        cc?: ReturnType<
          typeof dependency_1.mail_base.MailAddress.prototype.toObject
        >[];
        bcc?: ReturnType<
          typeof dependency_1.mail_base.MailAddress.prototype.toObject
        >[];
        body?: string;
        deliver_time?: number;
      } = {};
      if (this.subject != null) {
        data.subject = this.subject;
      }
      if (this.from != null) {
        data.from = this.from.toObject();
      }
      if (this.to != null) {
        data.to = this.to.map((item: dependency_1.mail_base.MailAddress) =>
          item.toObject(),
        );
      }
      if (this.cc != null) {
        data.cc = this.cc.map((item: dependency_1.mail_base.MailAddress) =>
          item.toObject(),
        );
      }
      if (this.bcc != null) {
        data.bcc = this.bcc.map((item: dependency_1.mail_base.MailAddress) =>
          item.toObject(),
        );
      }
      if (this.body != null) {
        data.body = this.body;
      }
      if (this.deliver_time != null) {
        data.deliver_time = this.deliver_time;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.subject.length) writer.writeString(1, this.subject);
      if (this.has_from)
        writer.writeMessage(2, this.from, () => this.from.serialize(writer));
      if (this.to.length)
        writer.writeRepeatedMessage(
          3,
          this.to,
          (item: dependency_1.mail_base.MailAddress) => item.serialize(writer),
        );
      if (this.cc.length)
        writer.writeRepeatedMessage(
          4,
          this.cc,
          (item: dependency_1.mail_base.MailAddress) => item.serialize(writer),
        );
      if (this.bcc.length)
        writer.writeRepeatedMessage(
          5,
          this.bcc,
          (item: dependency_1.mail_base.MailAddress) => item.serialize(writer),
        );
      if (this.body.length) writer.writeString(6, this.body);
      if (this.deliver_time != 0) writer.writeInt64(7, this.deliver_time);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendMailRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SendMailRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.subject = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.from,
              () =>
                (message.from =
                  dependency_1.mail_base.MailAddress.deserialize(reader)),
            );
            break;
          case 3:
            reader.readMessage(message.to, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                3,
                dependency_1.mail_base.MailAddress.deserialize(reader),
                dependency_1.mail_base.MailAddress,
              ),
            );
            break;
          case 4:
            reader.readMessage(message.cc, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                4,
                dependency_1.mail_base.MailAddress.deserialize(reader),
                dependency_1.mail_base.MailAddress,
              ),
            );
            break;
          case 5:
            reader.readMessage(message.bcc, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                5,
                dependency_1.mail_base.MailAddress.deserialize(reader),
                dependency_1.mail_base.MailAddress,
              ),
            );
            break;
          case 6:
            message.body = reader.readString();
            break;
          case 7:
            message.deliver_time = reader.readInt64();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SendMailRequest {
      return SendMailRequest.deserialize(bytes);
    }
  }
  export class SendMailRespone extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
      }
    }
    static fromObject(data: {}): SendMailRespone {
      const message = new SendMailRespone({});
      return message;
    }
    toObject() {
      const data: {} = {};
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendMailRespone {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SendMailRespone();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SendMailRespone {
      return SendMailRespone.deserialize(bytes);
    }
  }
  export class GetMailListRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            label?: string;
            last_uid?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('label' in data && data.label != undefined) {
          this.label = data.label;
        }
        if ('last_uid' in data && data.last_uid != undefined) {
          this.last_uid = data.last_uid;
        }
      }
    }
    get label() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set label(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get last_uid() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set last_uid(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      label?: string;
      last_uid?: string;
    }): GetMailListRequest {
      const message = new GetMailListRequest({});
      if (data.label != null) {
        message.label = data.label;
      }
      if (data.last_uid != null) {
        message.last_uid = data.last_uid;
      }
      return message;
    }
    toObject() {
      const data: {
        label?: string;
        last_uid?: string;
      } = {};
      if (this.label != null) {
        data.label = this.label;
      }
      if (this.last_uid != null) {
        data.last_uid = this.last_uid;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.label.length) writer.writeString(1, this.label);
      if (this.last_uid.length) writer.writeString(2, this.last_uid);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): GetMailListRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new GetMailListRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.label = reader.readString();
            break;
          case 2:
            message.last_uid = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetMailListRequest {
      return GetMailListRequest.deserialize(bytes);
    }
  }
  export class MessageInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            id?: string;
            reply_to_id?: string;
            subject?: string;
            from?: dependency_1.mail_base.MailAddress;
            to?: dependency_1.mail_base.MailAddress[];
            cc?: dependency_1.mail_base.MailAddress[];
            bcc?: dependency_1.mail_base.MailAddress[];
            create_time?: number;
            summary?: string;
            flaged?: boolean;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [5, 6, 7],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('id' in data && data.id != undefined) {
          this.id = data.id;
        }
        if ('reply_to_id' in data && data.reply_to_id != undefined) {
          this.reply_to_id = data.reply_to_id;
        }
        if ('subject' in data && data.subject != undefined) {
          this.subject = data.subject;
        }
        if ('from' in data && data.from != undefined) {
          this.from = data.from;
        }
        if ('to' in data && data.to != undefined) {
          this.to = data.to;
        }
        if ('cc' in data && data.cc != undefined) {
          this.cc = data.cc;
        }
        if ('bcc' in data && data.bcc != undefined) {
          this.bcc = data.bcc;
        }
        if ('create_time' in data && data.create_time != undefined) {
          this.create_time = data.create_time;
        }
        if ('summary' in data && data.summary != undefined) {
          this.summary = data.summary;
        }
        if ('flaged' in data && data.flaged != undefined) {
          this.flaged = data.flaged;
        }
      }
    }
    get id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get reply_to_id() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set reply_to_id(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get subject() {
      return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
    }
    set subject(value: string) {
      pb_1.Message.setField(this, 3, value);
    }
    get from() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.mail_base.MailAddress,
        4,
      ) as dependency_1.mail_base.MailAddress;
    }
    set from(value: dependency_1.mail_base.MailAddress) {
      pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_from() {
      return pb_1.Message.getField(this, 4) != null;
    }
    get to() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        dependency_1.mail_base.MailAddress,
        5,
      ) as dependency_1.mail_base.MailAddress[];
    }
    set to(value: dependency_1.mail_base.MailAddress[]) {
      pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    get cc() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        dependency_1.mail_base.MailAddress,
        6,
      ) as dependency_1.mail_base.MailAddress[];
    }
    set cc(value: dependency_1.mail_base.MailAddress[]) {
      pb_1.Message.setRepeatedWrapperField(this, 6, value);
    }
    get bcc() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        dependency_1.mail_base.MailAddress,
        7,
      ) as dependency_1.mail_base.MailAddress[];
    }
    set bcc(value: dependency_1.mail_base.MailAddress[]) {
      pb_1.Message.setRepeatedWrapperField(this, 7, value);
    }
    get create_time() {
      return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set create_time(value: number) {
      pb_1.Message.setField(this, 8, value);
    }
    get summary() {
      return pb_1.Message.getFieldWithDefault(this, 9, '') as string;
    }
    set summary(value: string) {
      pb_1.Message.setField(this, 9, value);
    }
    get flaged() {
      return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set flaged(value: boolean) {
      pb_1.Message.setField(this, 10, value);
    }
    static fromObject(data: {
      id?: string;
      reply_to_id?: string;
      subject?: string;
      from?: ReturnType<
        typeof dependency_1.mail_base.MailAddress.prototype.toObject
      >;
      to?: ReturnType<
        typeof dependency_1.mail_base.MailAddress.prototype.toObject
      >[];
      cc?: ReturnType<
        typeof dependency_1.mail_base.MailAddress.prototype.toObject
      >[];
      bcc?: ReturnType<
        typeof dependency_1.mail_base.MailAddress.prototype.toObject
      >[];
      create_time?: number;
      summary?: string;
      flaged?: boolean;
    }): MessageInfo {
      const message = new MessageInfo({});
      if (data.id != null) {
        message.id = data.id;
      }
      if (data.reply_to_id != null) {
        message.reply_to_id = data.reply_to_id;
      }
      if (data.subject != null) {
        message.subject = data.subject;
      }
      if (data.from != null) {
        message.from = dependency_1.mail_base.MailAddress.fromObject(data.from);
      }
      if (data.to != null) {
        message.to = data.to.map(item =>
          dependency_1.mail_base.MailAddress.fromObject(item),
        );
      }
      if (data.cc != null) {
        message.cc = data.cc.map(item =>
          dependency_1.mail_base.MailAddress.fromObject(item),
        );
      }
      if (data.bcc != null) {
        message.bcc = data.bcc.map(item =>
          dependency_1.mail_base.MailAddress.fromObject(item),
        );
      }
      if (data.create_time != null) {
        message.create_time = data.create_time;
      }
      if (data.summary != null) {
        message.summary = data.summary;
      }
      if (data.flaged != null) {
        message.flaged = data.flaged;
      }
      return message;
    }
    toObject() {
      const data: {
        id?: string;
        reply_to_id?: string;
        subject?: string;
        from?: ReturnType<
          typeof dependency_1.mail_base.MailAddress.prototype.toObject
        >;
        to?: ReturnType<
          typeof dependency_1.mail_base.MailAddress.prototype.toObject
        >[];
        cc?: ReturnType<
          typeof dependency_1.mail_base.MailAddress.prototype.toObject
        >[];
        bcc?: ReturnType<
          typeof dependency_1.mail_base.MailAddress.prototype.toObject
        >[];
        create_time?: number;
        summary?: string;
        flaged?: boolean;
      } = {};
      if (this.id != null) {
        data.id = this.id;
      }
      if (this.reply_to_id != null) {
        data.reply_to_id = this.reply_to_id;
      }
      if (this.subject != null) {
        data.subject = this.subject;
      }
      if (this.from != null) {
        data.from = this.from.toObject();
      }
      if (this.to != null) {
        data.to = this.to.map((item: dependency_1.mail_base.MailAddress) =>
          item.toObject(),
        );
      }
      if (this.cc != null) {
        data.cc = this.cc.map((item: dependency_1.mail_base.MailAddress) =>
          item.toObject(),
        );
      }
      if (this.bcc != null) {
        data.bcc = this.bcc.map((item: dependency_1.mail_base.MailAddress) =>
          item.toObject(),
        );
      }
      if (this.create_time != null) {
        data.create_time = this.create_time;
      }
      if (this.summary != null) {
        data.summary = this.summary;
      }
      if (this.flaged != null) {
        data.flaged = this.flaged;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.id.length) writer.writeString(1, this.id);
      if (this.reply_to_id.length) writer.writeString(2, this.reply_to_id);
      if (this.subject.length) writer.writeString(3, this.subject);
      if (this.has_from)
        writer.writeMessage(4, this.from, () => this.from.serialize(writer));
      if (this.to.length)
        writer.writeRepeatedMessage(
          5,
          this.to,
          (item: dependency_1.mail_base.MailAddress) => item.serialize(writer),
        );
      if (this.cc.length)
        writer.writeRepeatedMessage(
          6,
          this.cc,
          (item: dependency_1.mail_base.MailAddress) => item.serialize(writer),
        );
      if (this.bcc.length)
        writer.writeRepeatedMessage(
          7,
          this.bcc,
          (item: dependency_1.mail_base.MailAddress) => item.serialize(writer),
        );
      if (this.create_time != 0) writer.writeInt64(8, this.create_time);
      if (this.summary.length) writer.writeString(9, this.summary);
      if (this.flaged != false) writer.writeBool(10, this.flaged);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageInfo {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new MessageInfo();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.id = reader.readString();
            break;
          case 2:
            message.reply_to_id = reader.readString();
            break;
          case 3:
            message.subject = reader.readString();
            break;
          case 4:
            reader.readMessage(
              message.from,
              () =>
                (message.from =
                  dependency_1.mail_base.MailAddress.deserialize(reader)),
            );
            break;
          case 5:
            reader.readMessage(message.to, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                5,
                dependency_1.mail_base.MailAddress.deserialize(reader),
                dependency_1.mail_base.MailAddress,
              ),
            );
            break;
          case 6:
            reader.readMessage(message.cc, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                6,
                dependency_1.mail_base.MailAddress.deserialize(reader),
                dependency_1.mail_base.MailAddress,
              ),
            );
            break;
          case 7:
            reader.readMessage(message.bcc, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                7,
                dependency_1.mail_base.MailAddress.deserialize(reader),
                dependency_1.mail_base.MailAddress,
              ),
            );
            break;
          case 8:
            message.create_time = reader.readInt64();
            break;
          case 9:
            message.summary = reader.readString();
            break;
          case 10:
            message.flaged = reader.readBool();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MessageInfo {
      return MessageInfo.deserialize(bytes);
    }
  }
  export class GetMailListResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            message_count?: number;
            last_uid?: string;
            message_info?: MessageInfo[];
            has_more?: boolean;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [3],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('message_count' in data && data.message_count != undefined) {
          this.message_count = data.message_count;
        }
        if ('last_uid' in data && data.last_uid != undefined) {
          this.last_uid = data.last_uid;
        }
        if ('message_info' in data && data.message_info != undefined) {
          this.message_info = data.message_info;
        }
        if ('has_more' in data && data.has_more != undefined) {
          this.has_more = data.has_more;
        }
      }
    }
    get message_count() {
      return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set message_count(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get last_uid() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set last_uid(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get message_info() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        MessageInfo,
        3,
      ) as MessageInfo[];
    }
    set message_info(value: MessageInfo[]) {
      pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get has_more() {
      return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set has_more(value: boolean) {
      pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
      message_count?: number;
      last_uid?: string;
      message_info?: ReturnType<typeof MessageInfo.prototype.toObject>[];
      has_more?: boolean;
    }): GetMailListResponse {
      const message = new GetMailListResponse({});
      if (data.message_count != null) {
        message.message_count = data.message_count;
      }
      if (data.last_uid != null) {
        message.last_uid = data.last_uid;
      }
      if (data.message_info != null) {
        message.message_info = data.message_info.map(item =>
          MessageInfo.fromObject(item),
        );
      }
      if (data.has_more != null) {
        message.has_more = data.has_more;
      }
      return message;
    }
    toObject() {
      const data: {
        message_count?: number;
        last_uid?: string;
        message_info?: ReturnType<typeof MessageInfo.prototype.toObject>[];
        has_more?: boolean;
      } = {};
      if (this.message_count != null) {
        data.message_count = this.message_count;
      }
      if (this.last_uid != null) {
        data.last_uid = this.last_uid;
      }
      if (this.message_info != null) {
        data.message_info = this.message_info.map((item: MessageInfo) =>
          item.toObject(),
        );
      }
      if (this.has_more != null) {
        data.has_more = this.has_more;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.message_count != 0) writer.writeInt32(1, this.message_count);
      if (this.last_uid.length) writer.writeString(2, this.last_uid);
      if (this.message_info.length)
        writer.writeRepeatedMessage(3, this.message_info, (item: MessageInfo) =>
          item.serialize(writer),
        );
      if (this.has_more != false) writer.writeBool(4, this.has_more);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): GetMailListResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new GetMailListResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.message_count = reader.readInt32();
            break;
          case 2:
            message.last_uid = reader.readString();
            break;
          case 3:
            reader.readMessage(message.message_info, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                3,
                MessageInfo.deserialize(reader),
                MessageInfo,
              ),
            );
            break;
          case 4:
            message.has_more = reader.readBool();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetMailListResponse {
      return GetMailListResponse.deserialize(bytes);
    }
  }
  export class GetMailMessageRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            message_id?: string[];
            label?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [1],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('message_id' in data && data.message_id != undefined) {
          this.message_id = data.message_id;
        }
        if ('label' in data && data.label != undefined) {
          this.label = data.label;
        }
      }
    }
    get message_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
    }
    set message_id(value: string[]) {
      pb_1.Message.setField(this, 1, value);
    }
    get label() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set label(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      message_id?: string[];
      label?: string;
    }): GetMailMessageRequest {
      const message = new GetMailMessageRequest({});
      if (data.message_id != null) {
        message.message_id = data.message_id;
      }
      if (data.label != null) {
        message.label = data.label;
      }
      return message;
    }
    toObject() {
      const data: {
        message_id?: string[];
        label?: string;
      } = {};
      if (this.message_id != null) {
        data.message_id = this.message_id;
      }
      if (this.label != null) {
        data.label = this.label;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.message_id.length)
        writer.writeRepeatedString(1, this.message_id);
      if (this.label.length) writer.writeString(2, this.label);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): GetMailMessageRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new GetMailMessageRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            pb_1.Message.addToRepeatedField(message, 1, reader.readString());
            break;
          case 2:
            message.label = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetMailMessageRequest {
      return GetMailMessageRequest.deserialize(bytes);
    }
  }
  export class MessageFull extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            id?: string;
            message_info?: MessageInfo;
            body?: string;
            labels?: string[];
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [4],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('id' in data && data.id != undefined) {
          this.id = data.id;
        }
        if ('message_info' in data && data.message_info != undefined) {
          this.message_info = data.message_info;
        }
        if ('body' in data && data.body != undefined) {
          this.body = data.body;
        }
        if ('labels' in data && data.labels != undefined) {
          this.labels = data.labels;
        }
      }
    }
    get id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get message_info() {
      return pb_1.Message.getWrapperField(this, MessageInfo, 2) as MessageInfo;
    }
    set message_info(value: MessageInfo) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_message_info() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get body() {
      return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
    }
    set body(value: string) {
      pb_1.Message.setField(this, 3, value);
    }
    get labels() {
      return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
    }
    set labels(value: string[]) {
      pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
      id?: string;
      message_info?: ReturnType<typeof MessageInfo.prototype.toObject>;
      body?: string;
      labels?: string[];
    }): MessageFull {
      const message = new MessageFull({});
      if (data.id != null) {
        message.id = data.id;
      }
      if (data.message_info != null) {
        message.message_info = MessageInfo.fromObject(data.message_info);
      }
      if (data.body != null) {
        message.body = data.body;
      }
      if (data.labels != null) {
        message.labels = data.labels;
      }
      return message;
    }
    toObject() {
      const data: {
        id?: string;
        message_info?: ReturnType<typeof MessageInfo.prototype.toObject>;
        body?: string;
        labels?: string[];
      } = {};
      if (this.id != null) {
        data.id = this.id;
      }
      if (this.message_info != null) {
        data.message_info = this.message_info.toObject();
      }
      if (this.body != null) {
        data.body = this.body;
      }
      if (this.labels != null) {
        data.labels = this.labels;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.id.length) writer.writeString(1, this.id);
      if (this.has_message_info)
        writer.writeMessage(2, this.message_info, () =>
          this.message_info.serialize(writer),
        );
      if (this.body.length) writer.writeString(3, this.body);
      if (this.labels.length) writer.writeRepeatedString(4, this.labels);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageFull {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new MessageFull();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.id = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.message_info,
              () => (message.message_info = MessageInfo.deserialize(reader)),
            );
            break;
          case 3:
            message.body = reader.readString();
            break;
          case 4:
            pb_1.Message.addToRepeatedField(message, 4, reader.readString());
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MessageFull {
      return MessageFull.deserialize(bytes);
    }
  }
  export class GetMailMessageResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            message_full?: MessageFull[];
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [1],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('message_full' in data && data.message_full != undefined) {
          this.message_full = data.message_full;
        }
      }
    }
    get message_full() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        MessageFull,
        1,
      ) as MessageFull[];
    }
    set message_full(value: MessageFull[]) {
      pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
      message_full?: ReturnType<typeof MessageFull.prototype.toObject>[];
    }): GetMailMessageResponse {
      const message = new GetMailMessageResponse({});
      if (data.message_full != null) {
        message.message_full = data.message_full.map(item =>
          MessageFull.fromObject(item),
        );
      }
      return message;
    }
    toObject() {
      const data: {
        message_full?: ReturnType<typeof MessageFull.prototype.toObject>[];
      } = {};
      if (this.message_full != null) {
        data.message_full = this.message_full.map((item: MessageFull) =>
          item.toObject(),
        );
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.message_full.length)
        writer.writeRepeatedMessage(1, this.message_full, (item: MessageFull) =>
          item.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): GetMailMessageResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new GetMailMessageResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(message.message_full, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                1,
                MessageFull.deserialize(reader),
                MessageFull,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetMailMessageResponse {
      return GetMailMessageResponse.deserialize(bytes);
    }
  }
  export class UpdateMailMessageRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            ids?: string[];
            add_label?: string;
            remove_label?: string;
            is_move?: boolean;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [1],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('ids' in data && data.ids != undefined) {
          this.ids = data.ids;
        }
        if ('add_label' in data && data.add_label != undefined) {
          this.add_label = data.add_label;
        }
        if ('remove_label' in data && data.remove_label != undefined) {
          this.remove_label = data.remove_label;
        }
        if ('is_move' in data && data.is_move != undefined) {
          this.is_move = data.is_move;
        }
      }
    }
    get ids() {
      return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
    }
    set ids(value: string[]) {
      pb_1.Message.setField(this, 1, value);
    }
    get add_label() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set add_label(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get remove_label() {
      return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
    }
    set remove_label(value: string) {
      pb_1.Message.setField(this, 3, value);
    }
    get is_move() {
      return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set is_move(value: boolean) {
      pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
      ids?: string[];
      add_label?: string;
      remove_label?: string;
      is_move?: boolean;
    }): UpdateMailMessageRequest {
      const message = new UpdateMailMessageRequest({});
      if (data.ids != null) {
        message.ids = data.ids;
      }
      if (data.add_label != null) {
        message.add_label = data.add_label;
      }
      if (data.remove_label != null) {
        message.remove_label = data.remove_label;
      }
      if (data.is_move != null) {
        message.is_move = data.is_move;
      }
      return message;
    }
    toObject() {
      const data: {
        ids?: string[];
        add_label?: string;
        remove_label?: string;
        is_move?: boolean;
      } = {};
      if (this.ids != null) {
        data.ids = this.ids;
      }
      if (this.add_label != null) {
        data.add_label = this.add_label;
      }
      if (this.remove_label != null) {
        data.remove_label = this.remove_label;
      }
      if (this.is_move != null) {
        data.is_move = this.is_move;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.ids.length) writer.writeRepeatedString(1, this.ids);
      if (this.add_label.length) writer.writeString(2, this.add_label);
      if (this.remove_label.length) writer.writeString(3, this.remove_label);
      if (this.is_move != false) writer.writeBool(4, this.is_move);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): UpdateMailMessageRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new UpdateMailMessageRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            pb_1.Message.addToRepeatedField(message, 1, reader.readString());
            break;
          case 2:
            message.add_label = reader.readString();
            break;
          case 3:
            message.remove_label = reader.readString();
            break;
          case 4:
            message.is_move = reader.readBool();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateMailMessageRequest {
      return UpdateMailMessageRequest.deserialize(bytes);
    }
  }
  export class UpdateMailMessageResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
      }
    }
    static fromObject(data: {}): UpdateMailMessageResponse {
      const message = new UpdateMailMessageResponse({});
      return message;
    }
    toObject() {
      const data: {} = {};
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): UpdateMailMessageResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new UpdateMailMessageResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateMailMessageResponse {
      return UpdateMailMessageResponse.deserialize(bytes);
    }
  }
  export class DeleteMailMessageRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            ids?: string[];
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [1],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('ids' in data && data.ids != undefined) {
          this.ids = data.ids;
        }
      }
    }
    get ids() {
      return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
    }
    set ids(value: string[]) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {ids?: string[]}): DeleteMailMessageRequest {
      const message = new DeleteMailMessageRequest({});
      if (data.ids != null) {
        message.ids = data.ids;
      }
      return message;
    }
    toObject() {
      const data: {
        ids?: string[];
      } = {};
      if (this.ids != null) {
        data.ids = this.ids;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.ids.length) writer.writeRepeatedString(1, this.ids);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): DeleteMailMessageRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new DeleteMailMessageRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            pb_1.Message.addToRepeatedField(message, 1, reader.readString());
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteMailMessageRequest {
      return DeleteMailMessageRequest.deserialize(bytes);
    }
  }
  export class DeleteMailMessageResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
      }
    }
    static fromObject(data: {}): DeleteMailMessageResponse {
      const message = new DeleteMailMessageResponse({});
      return message;
    }
    toObject() {
      const data: {} = {};
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): DeleteMailMessageResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new DeleteMailMessageResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteMailMessageResponse {
      return DeleteMailMessageResponse.deserialize(bytes);
    }
  }
  export class GetCalendarRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            type?: CalendarEventType;
            years?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('type' in data && data.type != undefined) {
          this.type = data.type;
        }
        if ('years' in data && data.years != undefined) {
          this.years = data.years;
        }
      }
    }
    get type() {
      return pb_1.Message.getFieldWithDefault(
        this,
        1,
        CalendarEventType.all,
      ) as CalendarEventType;
    }
    set type(value: CalendarEventType) {
      pb_1.Message.setField(this, 1, value);
    }
    get years() {
      return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set years(value: number) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      type?: CalendarEventType;
      years?: number;
    }): GetCalendarRequest {
      const message = new GetCalendarRequest({});
      if (data.type != null) {
        message.type = data.type;
      }
      if (data.years != null) {
        message.years = data.years;
      }
      return message;
    }
    toObject() {
      const data: {
        type?: CalendarEventType;
        years?: number;
      } = {};
      if (this.type != null) {
        data.type = this.type;
      }
      if (this.years != null) {
        data.years = this.years;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.type != CalendarEventType.all) writer.writeEnum(1, this.type);
      if (this.years != 0) writer.writeInt32(2, this.years);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): GetCalendarRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new GetCalendarRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.type = reader.readEnum();
            break;
          case 2:
            message.years = reader.readInt32();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetCalendarRequest {
      return GetCalendarRequest.deserialize(bytes);
    }
  }
  export class CalendarEvent extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            id?: number;
            start_time?: number;
            end_time?: number;
            title?: string;
            type?: CalendarEventType;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('id' in data && data.id != undefined) {
          this.id = data.id;
        }
        if ('start_time' in data && data.start_time != undefined) {
          this.start_time = data.start_time;
        }
        if ('end_time' in data && data.end_time != undefined) {
          this.end_time = data.end_time;
        }
        if ('title' in data && data.title != undefined) {
          this.title = data.title;
        }
        if ('type' in data && data.type != undefined) {
          this.type = data.type;
        }
      }
    }
    get id() {
      return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get start_time() {
      return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set start_time(value: number) {
      pb_1.Message.setField(this, 2, value);
    }
    get end_time() {
      return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set end_time(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    get title() {
      return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
    }
    set title(value: string) {
      pb_1.Message.setField(this, 4, value);
    }
    get type() {
      return pb_1.Message.getFieldWithDefault(
        this,
        5,
        CalendarEventType.all,
      ) as CalendarEventType;
    }
    set type(value: CalendarEventType) {
      pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
      id?: number;
      start_time?: number;
      end_time?: number;
      title?: string;
      type?: CalendarEventType;
    }): CalendarEvent {
      const message = new CalendarEvent({});
      if (data.id != null) {
        message.id = data.id;
      }
      if (data.start_time != null) {
        message.start_time = data.start_time;
      }
      if (data.end_time != null) {
        message.end_time = data.end_time;
      }
      if (data.title != null) {
        message.title = data.title;
      }
      if (data.type != null) {
        message.type = data.type;
      }
      return message;
    }
    toObject() {
      const data: {
        id?: number;
        start_time?: number;
        end_time?: number;
        title?: string;
        type?: CalendarEventType;
      } = {};
      if (this.id != null) {
        data.id = this.id;
      }
      if (this.start_time != null) {
        data.start_time = this.start_time;
      }
      if (this.end_time != null) {
        data.end_time = this.end_time;
      }
      if (this.title != null) {
        data.title = this.title;
      }
      if (this.type != null) {
        data.type = this.type;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.id != 0) writer.writeInt32(1, this.id);
      if (this.start_time != 0) writer.writeInt64(2, this.start_time);
      if (this.end_time != 0) writer.writeInt64(3, this.end_time);
      if (this.title.length) writer.writeString(4, this.title);
      if (this.type != CalendarEventType.all) writer.writeEnum(5, this.type);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CalendarEvent {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new CalendarEvent();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.id = reader.readInt32();
            break;
          case 2:
            message.start_time = reader.readInt64();
            break;
          case 3:
            message.end_time = reader.readInt64();
            break;
          case 4:
            message.title = reader.readString();
            break;
          case 5:
            message.type = reader.readEnum();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CalendarEvent {
      return CalendarEvent.deserialize(bytes);
    }
  }
  export class GetCalendarResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            calander_event?: CalendarEvent[];
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [1],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('calander_event' in data && data.calander_event != undefined) {
          this.calander_event = data.calander_event;
        }
      }
    }
    get calander_event() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        CalendarEvent,
        1,
      ) as CalendarEvent[];
    }
    set calander_event(value: CalendarEvent[]) {
      pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
      calander_event?: ReturnType<typeof CalendarEvent.prototype.toObject>[];
    }): GetCalendarResponse {
      const message = new GetCalendarResponse({});
      if (data.calander_event != null) {
        message.calander_event = data.calander_event.map(item =>
          CalendarEvent.fromObject(item),
        );
      }
      return message;
    }
    toObject() {
      const data: {
        calander_event?: ReturnType<typeof CalendarEvent.prototype.toObject>[];
      } = {};
      if (this.calander_event != null) {
        data.calander_event = this.calander_event.map((item: CalendarEvent) =>
          item.toObject(),
        );
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.calander_event.length)
        writer.writeRepeatedMessage(
          1,
          this.calander_event,
          (item: CalendarEvent) => item.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): GetCalendarResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new GetCalendarResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(message.calander_event, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                1,
                CalendarEvent.deserialize(reader),
                CalendarEvent,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetCalendarResponse {
      return GetCalendarResponse.deserialize(bytes);
    }
  }
  export class UpdateCalendarRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1]];
    constructor(
      data?:
        | any[]
        | ({
            start_time?: number;
            end_time?: number;
            title?: string;
          } & {
            id?: number;
          }),
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('id' in data && data.id != undefined) {
          this.id = data.id;
        }
        if ('start_time' in data && data.start_time != undefined) {
          this.start_time = data.start_time;
        }
        if ('end_time' in data && data.end_time != undefined) {
          this.end_time = data.end_time;
        }
        if ('title' in data && data.title != undefined) {
          this.title = data.title;
        }
      }
    }
    get id() {
      return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
      pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get has_id() {
      return pb_1.Message.getField(this, 1) != null;
    }
    get start_time() {
      return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set start_time(value: number) {
      pb_1.Message.setField(this, 2, value);
    }
    get end_time() {
      return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set end_time(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    get title() {
      return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
    }
    set title(value: string) {
      pb_1.Message.setField(this, 4, value);
    }
    get _id() {
      const cases: {
        [index: number]: 'none' | 'id';
      } = {
        0: 'none',
        1: 'id',
      };
      return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    static fromObject(data: {
      id?: number;
      start_time?: number;
      end_time?: number;
      title?: string;
    }): UpdateCalendarRequest {
      const message = new UpdateCalendarRequest({});
      if (data.id != null) {
        message.id = data.id;
      }
      if (data.start_time != null) {
        message.start_time = data.start_time;
      }
      if (data.end_time != null) {
        message.end_time = data.end_time;
      }
      if (data.title != null) {
        message.title = data.title;
      }
      return message;
    }
    toObject() {
      const data: {
        id?: number;
        start_time?: number;
        end_time?: number;
        title?: string;
      } = {};
      if (this.id != null) {
        data.id = this.id;
      }
      if (this.start_time != null) {
        data.start_time = this.start_time;
      }
      if (this.end_time != null) {
        data.end_time = this.end_time;
      }
      if (this.title != null) {
        data.title = this.title;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.has_id) writer.writeInt32(1, this.id);
      if (this.start_time != 0) writer.writeInt64(2, this.start_time);
      if (this.end_time != 0) writer.writeInt64(3, this.end_time);
      if (this.title.length) writer.writeString(4, this.title);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): UpdateCalendarRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new UpdateCalendarRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.id = reader.readInt32();
            break;
          case 2:
            message.start_time = reader.readInt64();
            break;
          case 3:
            message.end_time = reader.readInt64();
            break;
          case 4:
            message.title = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateCalendarRequest {
      return UpdateCalendarRequest.deserialize(bytes);
    }
  }
  export class UpdateCalendarResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            id?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('id' in data && data.id != undefined) {
          this.id = data.id;
        }
      }
    }
    get id() {
      return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {id?: number}): UpdateCalendarResponse {
      const message = new UpdateCalendarResponse({});
      if (data.id != null) {
        message.id = data.id;
      }
      return message;
    }
    toObject() {
      const data: {
        id?: number;
      } = {};
      if (this.id != null) {
        data.id = this.id;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.id != 0) writer.writeInt32(1, this.id);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): UpdateCalendarResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new UpdateCalendarResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.id = reader.readInt32();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateCalendarResponse {
      return UpdateCalendarResponse.deserialize(bytes);
    }
  }
  export class GetMailLabelsRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            labels?: string[];
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [1],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('labels' in data && data.labels != undefined) {
          this.labels = data.labels;
        }
      }
    }
    get labels() {
      return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
    }
    set labels(value: string[]) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {labels?: string[]}): GetMailLabelsRequest {
      const message = new GetMailLabelsRequest({});
      if (data.labels != null) {
        message.labels = data.labels;
      }
      return message;
    }
    toObject() {
      const data: {
        labels?: string[];
      } = {};
      if (this.labels != null) {
        data.labels = this.labels;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.labels.length) writer.writeRepeatedString(1, this.labels);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): GetMailLabelsRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new GetMailLabelsRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            pb_1.Message.addToRepeatedField(message, 1, reader.readString());
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetMailLabelsRequest {
      return GetMailLabelsRequest.deserialize(bytes);
    }
  }
  export class MailLabel extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            label_id?: string;
            label_name?: string;
            unread_count?: number;
            total_count?: number;
            is_system?: boolean;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('label_id' in data && data.label_id != undefined) {
          this.label_id = data.label_id;
        }
        if ('label_name' in data && data.label_name != undefined) {
          this.label_name = data.label_name;
        }
        if ('unread_count' in data && data.unread_count != undefined) {
          this.unread_count = data.unread_count;
        }
        if ('total_count' in data && data.total_count != undefined) {
          this.total_count = data.total_count;
        }
        if ('is_system' in data && data.is_system != undefined) {
          this.is_system = data.is_system;
        }
      }
    }
    get label_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set label_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get label_name() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set label_name(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get unread_count() {
      return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set unread_count(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    get total_count() {
      return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set total_count(value: number) {
      pb_1.Message.setField(this, 4, value);
    }
    get is_system() {
      return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set is_system(value: boolean) {
      pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
      label_id?: string;
      label_name?: string;
      unread_count?: number;
      total_count?: number;
      is_system?: boolean;
    }): MailLabel {
      const message = new MailLabel({});
      if (data.label_id != null) {
        message.label_id = data.label_id;
      }
      if (data.label_name != null) {
        message.label_name = data.label_name;
      }
      if (data.unread_count != null) {
        message.unread_count = data.unread_count;
      }
      if (data.total_count != null) {
        message.total_count = data.total_count;
      }
      if (data.is_system != null) {
        message.is_system = data.is_system;
      }
      return message;
    }
    toObject() {
      const data: {
        label_id?: string;
        label_name?: string;
        unread_count?: number;
        total_count?: number;
        is_system?: boolean;
      } = {};
      if (this.label_id != null) {
        data.label_id = this.label_id;
      }
      if (this.label_name != null) {
        data.label_name = this.label_name;
      }
      if (this.unread_count != null) {
        data.unread_count = this.unread_count;
      }
      if (this.total_count != null) {
        data.total_count = this.total_count;
      }
      if (this.is_system != null) {
        data.is_system = this.is_system;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.label_id.length) writer.writeString(1, this.label_id);
      if (this.label_name.length) writer.writeString(2, this.label_name);
      if (this.unread_count != 0) writer.writeInt32(3, this.unread_count);
      if (this.total_count != 0) writer.writeInt32(4, this.total_count);
      if (this.is_system != false) writer.writeBool(5, this.is_system);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailLabel {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new MailLabel();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.label_id = reader.readString();
            break;
          case 2:
            message.label_name = reader.readString();
            break;
          case 3:
            message.unread_count = reader.readInt32();
            break;
          case 4:
            message.total_count = reader.readInt32();
            break;
          case 5:
            message.is_system = reader.readBool();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MailLabel {
      return MailLabel.deserialize(bytes);
    }
  }
  export class GetMailLabelResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            labels?: MailLabel[];
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [1],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('labels' in data && data.labels != undefined) {
          this.labels = data.labels;
        }
      }
    }
    get labels() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        MailLabel,
        1,
      ) as MailLabel[];
    }
    set labels(value: MailLabel[]) {
      pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
      labels?: ReturnType<typeof MailLabel.prototype.toObject>[];
    }): GetMailLabelResponse {
      const message = new GetMailLabelResponse({});
      if (data.labels != null) {
        message.labels = data.labels.map(item => MailLabel.fromObject(item));
      }
      return message;
    }
    toObject() {
      const data: {
        labels?: ReturnType<typeof MailLabel.prototype.toObject>[];
      } = {};
      if (this.labels != null) {
        data.labels = this.labels.map((item: MailLabel) => item.toObject());
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.labels.length)
        writer.writeRepeatedMessage(1, this.labels, (item: MailLabel) =>
          item.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): GetMailLabelResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new GetMailLabelResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(message.labels, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                1,
                MailLabel.deserialize(reader),
                MailLabel,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetMailLabelResponse {
      return GetMailLabelResponse.deserialize(bytes);
    }
  }
  interface GrpcUnaryServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (
      message: P,
      metadata: grpc_1.Metadata,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (
      message: P,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
  }
  interface GrpcStreamServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
  }
  interface GrpWritableServiceInterface<P, R> {
    (
      metadata: grpc_1.Metadata,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (
      metadata: grpc_1.Metadata,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
  }
  interface GrpcChunkServiceInterface<P, R> {
    (
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
  }
  interface GrpcPromiseServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
  }
  export abstract class UnimplementedMessageServiceService {
    static definition = {
      GetMailLabels: {
        path: '/command.MessageService/GetMailLabels',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: GetMailLabelsRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          GetMailLabelsRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: GetMailLabelResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          GetMailLabelResponse.deserialize(new Uint8Array(bytes)),
      },
      GetMailList: {
        path: '/command.MessageService/GetMailList',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: GetMailListRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          GetMailListRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: GetMailListResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          GetMailListResponse.deserialize(new Uint8Array(bytes)),
      },
      GetMailMessage: {
        path: '/command.MessageService/GetMailMessage',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: GetMailMessageRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          GetMailMessageRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: GetMailMessageResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          GetMailMessageResponse.deserialize(new Uint8Array(bytes)),
      },
      SendMail: {
        path: '/command.MessageService/SendMail',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: SendMailRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          SendMailRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: SendMailRespone) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          SendMailRespone.deserialize(new Uint8Array(bytes)),
      },
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract GetMailLabels(
      call: grpc_1.ServerUnaryCall<GetMailLabelsRequest, GetMailLabelResponse>,
      callback: grpc_1.sendUnaryData<GetMailLabelResponse>,
    ): void;
    abstract GetMailList(
      call: grpc_1.ServerUnaryCall<GetMailListRequest, GetMailListResponse>,
      callback: grpc_1.sendUnaryData<GetMailListResponse>,
    ): void;
    abstract GetMailMessage(
      call: grpc_1.ServerUnaryCall<
        GetMailMessageRequest,
        GetMailMessageResponse
      >,
      callback: grpc_1.sendUnaryData<GetMailMessageResponse>,
    ): void;
    abstract SendMail(
      call: grpc_1.ServerUnaryCall<SendMailRequest, SendMailRespone>,
      callback: grpc_1.sendUnaryData<SendMailRespone>,
    ): void;
  }
  export class MessageServiceClient extends grpc_1.makeGenericClientConstructor(
    UnimplementedMessageServiceService.definition,
    'MessageService',
    {},
  ) {
    constructor(
      address: string,
      credentials: grpc_1.ChannelCredentials,
      options?: Partial<grpc_1.ChannelOptions>,
    ) {
      super(address, credentials, options);
    }
    GetMailLabels: GrpcUnaryServiceInterface<
      GetMailLabelsRequest,
      GetMailLabelResponse
    > = (
      message: GetMailLabelsRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<GetMailLabelResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<GetMailLabelResponse>,
      callback?: grpc_1.requestCallback<GetMailLabelResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.GetMailLabels(message, metadata, options, callback);
    };
    GetMailList: GrpcUnaryServiceInterface<
      GetMailListRequest,
      GetMailListResponse
    > = (
      message: GetMailListRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<GetMailListResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<GetMailListResponse>,
      callback?: grpc_1.requestCallback<GetMailListResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.GetMailList(message, metadata, options, callback);
    };
    GetMailMessage: GrpcUnaryServiceInterface<
      GetMailMessageRequest,
      GetMailMessageResponse
    > = (
      message: GetMailMessageRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<GetMailMessageResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<GetMailMessageResponse>,
      callback?: grpc_1.requestCallback<GetMailMessageResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.GetMailMessage(message, metadata, options, callback);
    };
    SendMail: GrpcUnaryServiceInterface<SendMailRequest, SendMailRespone> = (
      message: SendMailRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<SendMailRespone>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<SendMailRespone>,
      callback?: grpc_1.requestCallback<SendMailRespone>,
    ): grpc_1.ClientUnaryCall => {
      return super.SendMail(message, metadata, options, callback);
    };
  }
  export abstract class UnimplementedMailAccountService {
    static definition = {
      UpdateAccount: {
        path: '/command.MailAccount/UpdateAccount',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: UpdateAccountRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          UpdateAccountRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: UpdateAccountResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          UpdateAccountResponse.deserialize(new Uint8Array(bytes)),
      },
      GetAccount: {
        path: '/command.MailAccount/GetAccount',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: GetAccountRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          GetAccountRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: GetAccountResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          GetAccountResponse.deserialize(new Uint8Array(bytes)),
      },
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract UpdateAccount(
      call: grpc_1.ServerUnaryCall<UpdateAccountRequest, UpdateAccountResponse>,
      callback: grpc_1.sendUnaryData<UpdateAccountResponse>,
    ): void;
    abstract GetAccount(
      call: grpc_1.ServerUnaryCall<GetAccountRequest, GetAccountResponse>,
      callback: grpc_1.sendUnaryData<GetAccountResponse>,
    ): void;
  }
  export class MailAccountClient extends grpc_1.makeGenericClientConstructor(
    UnimplementedMailAccountService.definition,
    'MailAccount',
    {},
  ) {
    constructor(
      address: string,
      credentials: grpc_1.ChannelCredentials,
      options?: Partial<grpc_1.ChannelOptions>,
    ) {
      super(address, credentials, options);
    }
    UpdateAccount: GrpcUnaryServiceInterface<
      UpdateAccountRequest,
      UpdateAccountResponse
    > = (
      message: UpdateAccountRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<UpdateAccountResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<UpdateAccountResponse>,
      callback?: grpc_1.requestCallback<UpdateAccountResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.UpdateAccount(message, metadata, options, callback);
    };
    GetAccount: GrpcUnaryServiceInterface<
      GetAccountRequest,
      GetAccountResponse
    > = (
      message: GetAccountRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<GetAccountResponse>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAccountResponse>,
      callback?: grpc_1.requestCallback<GetAccountResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.GetAccount(message, metadata, options, callback);
    };
  }
}
