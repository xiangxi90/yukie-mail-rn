/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.22.2
 * source: mail_base.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from 'google-protobuf';
export namespace mail_base {
  export enum AccountStatus {
    success = 0,
    empty = 1,
    expired = 2,
  }
  export enum MailProtocal {
    none = 0,
    starttls = 1,
    tls = 2,
  }
  export class MailAddress extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            name?: string;
            address?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('name' in data && data.name != undefined) {
          this.name = data.name;
        }
        if ('address' in data && data.address != undefined) {
          this.address = data.address;
        }
      }
    }
    get name() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set name(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get address() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set address(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {name?: string; address?: string}): MailAddress {
      const message = new MailAddress({});
      if (data.name != null) {
        message.name = data.name;
      }
      if (data.address != null) {
        message.address = data.address;
      }
      return message;
    }
    toObject() {
      const data: {
        name?: string;
        address?: string;
      } = {};
      if (this.name != null) {
        data.name = this.name;
      }
      if (this.address != null) {
        data.address = this.address;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.name.length) writer.writeString(1, this.name);
      if (this.address.length) writer.writeString(2, this.address);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailAddress {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new MailAddress();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.name = reader.readString();
            break;
          case 2:
            message.address = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MailAddress {
      return MailAddress.deserialize(bytes);
    }
  }
  export class Account extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            mail_address?: MailAddress;
            status?: AccountStatus;
            smtp_server?: string;
            smtp_account?: string;
            smtp_port?: number;
            smtp_password?: string;
            smtp_protocol?: MailProtocal;
            imap_server?: string;
            imap_port?: number;
            imap_account?: string;
            imap_password?: string;
            imap_protocol?: MailProtocal;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('mail_address' in data && data.mail_address != undefined) {
          this.mail_address = data.mail_address;
        }
        if ('status' in data && data.status != undefined) {
          this.status = data.status;
        }
        if ('smtp_server' in data && data.smtp_server != undefined) {
          this.smtp_server = data.smtp_server;
        }
        if ('smtp_account' in data && data.smtp_account != undefined) {
          this.smtp_account = data.smtp_account;
        }
        if ('smtp_port' in data && data.smtp_port != undefined) {
          this.smtp_port = data.smtp_port;
        }
        if ('smtp_password' in data && data.smtp_password != undefined) {
          this.smtp_password = data.smtp_password;
        }
        if ('smtp_protocol' in data && data.smtp_protocol != undefined) {
          this.smtp_protocol = data.smtp_protocol;
        }
        if ('imap_server' in data && data.imap_server != undefined) {
          this.imap_server = data.imap_server;
        }
        if ('imap_port' in data && data.imap_port != undefined) {
          this.imap_port = data.imap_port;
        }
        if ('imap_account' in data && data.imap_account != undefined) {
          this.imap_account = data.imap_account;
        }
        if ('imap_password' in data && data.imap_password != undefined) {
          this.imap_password = data.imap_password;
        }
        if ('imap_protocol' in data && data.imap_protocol != undefined) {
          this.imap_protocol = data.imap_protocol;
        }
      }
    }
    get mail_address() {
      return pb_1.Message.getWrapperField(this, MailAddress, 1) as MailAddress;
    }
    set mail_address(value: MailAddress) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_mail_address() {
      return pb_1.Message.getField(this, 1) != null;
    }
    get status() {
      return pb_1.Message.getFieldWithDefault(
        this,
        2,
        AccountStatus.success,
      ) as AccountStatus;
    }
    set status(value: AccountStatus) {
      pb_1.Message.setField(this, 2, value);
    }
    get smtp_server() {
      return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
    }
    set smtp_server(value: string) {
      pb_1.Message.setField(this, 3, value);
    }
    get smtp_account() {
      return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
    }
    set smtp_account(value: string) {
      pb_1.Message.setField(this, 4, value);
    }
    get smtp_port() {
      return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set smtp_port(value: number) {
      pb_1.Message.setField(this, 5, value);
    }
    get smtp_password() {
      return pb_1.Message.getFieldWithDefault(this, 6, '') as string;
    }
    set smtp_password(value: string) {
      pb_1.Message.setField(this, 6, value);
    }
    get smtp_protocol() {
      return pb_1.Message.getFieldWithDefault(
        this,
        7,
        MailProtocal.none,
      ) as MailProtocal;
    }
    set smtp_protocol(value: MailProtocal) {
      pb_1.Message.setField(this, 7, value);
    }
    get imap_server() {
      return pb_1.Message.getFieldWithDefault(this, 8, '') as string;
    }
    set imap_server(value: string) {
      pb_1.Message.setField(this, 8, value);
    }
    get imap_port() {
      return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set imap_port(value: number) {
      pb_1.Message.setField(this, 9, value);
    }
    get imap_account() {
      return pb_1.Message.getFieldWithDefault(this, 10, '') as string;
    }
    set imap_account(value: string) {
      pb_1.Message.setField(this, 10, value);
    }
    get imap_password() {
      return pb_1.Message.getFieldWithDefault(this, 11, '') as string;
    }
    set imap_password(value: string) {
      pb_1.Message.setField(this, 11, value);
    }
    get imap_protocol() {
      return pb_1.Message.getFieldWithDefault(
        this,
        12,
        MailProtocal.none,
      ) as MailProtocal;
    }
    set imap_protocol(value: MailProtocal) {
      pb_1.Message.setField(this, 12, value);
    }
    static fromObject(data: {
      mail_address?: ReturnType<typeof MailAddress.prototype.toObject>;
      status?: AccountStatus;
      smtp_server?: string;
      smtp_account?: string;
      smtp_port?: number;
      smtp_password?: string;
      smtp_protocol?: MailProtocal;
      imap_server?: string;
      imap_port?: number;
      imap_account?: string;
      imap_password?: string;
      imap_protocol?: MailProtocal;
    }): Account {
      const message = new Account({});
      if (data.mail_address != null) {
        message.mail_address = MailAddress.fromObject(data.mail_address);
      }
      if (data.status != null) {
        message.status = data.status;
      }
      if (data.smtp_server != null) {
        message.smtp_server = data.smtp_server;
      }
      if (data.smtp_account != null) {
        message.smtp_account = data.smtp_account;
      }
      if (data.smtp_port != null) {
        message.smtp_port = data.smtp_port;
      }
      if (data.smtp_password != null) {
        message.smtp_password = data.smtp_password;
      }
      if (data.smtp_protocol != null) {
        message.smtp_protocol = data.smtp_protocol;
      }
      if (data.imap_server != null) {
        message.imap_server = data.imap_server;
      }
      if (data.imap_port != null) {
        message.imap_port = data.imap_port;
      }
      if (data.imap_account != null) {
        message.imap_account = data.imap_account;
      }
      if (data.imap_password != null) {
        message.imap_password = data.imap_password;
      }
      if (data.imap_protocol != null) {
        message.imap_protocol = data.imap_protocol;
      }
      return message;
    }
    toObject() {
      const data: {
        mail_address?: ReturnType<typeof MailAddress.prototype.toObject>;
        status?: AccountStatus;
        smtp_server?: string;
        smtp_account?: string;
        smtp_port?: number;
        smtp_password?: string;
        smtp_protocol?: MailProtocal;
        imap_server?: string;
        imap_port?: number;
        imap_account?: string;
        imap_password?: string;
        imap_protocol?: MailProtocal;
      } = {};
      if (this.mail_address != null) {
        data.mail_address = this.mail_address.toObject();
      }
      if (this.status != null) {
        data.status = this.status;
      }
      if (this.smtp_server != null) {
        data.smtp_server = this.smtp_server;
      }
      if (this.smtp_account != null) {
        data.smtp_account = this.smtp_account;
      }
      if (this.smtp_port != null) {
        data.smtp_port = this.smtp_port;
      }
      if (this.smtp_password != null) {
        data.smtp_password = this.smtp_password;
      }
      if (this.smtp_protocol != null) {
        data.smtp_protocol = this.smtp_protocol;
      }
      if (this.imap_server != null) {
        data.imap_server = this.imap_server;
      }
      if (this.imap_port != null) {
        data.imap_port = this.imap_port;
      }
      if (this.imap_account != null) {
        data.imap_account = this.imap_account;
      }
      if (this.imap_password != null) {
        data.imap_password = this.imap_password;
      }
      if (this.imap_protocol != null) {
        data.imap_protocol = this.imap_protocol;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.has_mail_address)
        writer.writeMessage(1, this.mail_address, () =>
          this.mail_address.serialize(writer),
        );
      if (this.status != AccountStatus.success)
        writer.writeEnum(2, this.status);
      if (this.smtp_server.length) writer.writeString(3, this.smtp_server);
      if (this.smtp_account.length) writer.writeString(4, this.smtp_account);
      if (this.smtp_port != 0) writer.writeInt32(5, this.smtp_port);
      if (this.smtp_password.length) writer.writeString(6, this.smtp_password);
      if (this.smtp_protocol != MailProtocal.none)
        writer.writeEnum(7, this.smtp_protocol);
      if (this.imap_server.length) writer.writeString(8, this.imap_server);
      if (this.imap_port != 0) writer.writeInt32(9, this.imap_port);
      if (this.imap_account.length) writer.writeString(10, this.imap_account);
      if (this.imap_password.length) writer.writeString(11, this.imap_password);
      if (this.imap_protocol != MailProtocal.none)
        writer.writeEnum(12, this.imap_protocol);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Account {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new Account();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.mail_address,
              () => (message.mail_address = MailAddress.deserialize(reader)),
            );
            break;
          case 2:
            message.status = reader.readEnum();
            break;
          case 3:
            message.smtp_server = reader.readString();
            break;
          case 4:
            message.smtp_account = reader.readString();
            break;
          case 5:
            message.smtp_port = reader.readInt32();
            break;
          case 6:
            message.smtp_password = reader.readString();
            break;
          case 7:
            message.smtp_protocol = reader.readEnum();
            break;
          case 8:
            message.imap_server = reader.readString();
            break;
          case 9:
            message.imap_port = reader.readInt32();
            break;
          case 10:
            message.imap_account = reader.readString();
            break;
          case 11:
            message.imap_password = reader.readString();
            break;
          case 12:
            message.imap_protocol = reader.readEnum();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Account {
      return Account.deserialize(bytes);
    }
  }
}
